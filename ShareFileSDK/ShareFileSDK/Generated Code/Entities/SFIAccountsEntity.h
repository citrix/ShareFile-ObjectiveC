//
//  SFIAccountsEntity.h
//
//  Autogenerated by a tool.
//  Copyright (c) 2016 Citrix ShareFile. All rights reserved.
//

#import "SFIODataEntityBase.h"

@class SFIAccount;
@class SFISSOAccountProvider;
@class SFIODataObject;
@class SFIAccessControlDomains;
@class SFIFindSubdomainParams;

@interface SFIAccountsEntity : SFIODataEntityBase
{
}

/**
   @abstract Get current Account
   Retrieves information about the Account defined in the call subdomain
   @param id
   @return The subdomain account information
 */
- (SFApiQuery *)getWithId:(NSString *)Id;

/**
   @abstract Get current Account branding
   Retrievs Branding information about the subdomain account.This operation does not require authentication.@return Branding information for a given sharefile account
 */
- (SFApiQuery *)getBranding;

/**
   @abstract Modify the Branding for this account
   Modifies Branding information about the subdomain account.This operation requires authentication.@return Branding information for a given sharefile account
 */
- (SFApiQuery *)updateBrandingWithAccount:(SFIAccount *)account;

/**
   @abstract Get List of current Account Employees
   Retrives the list of Employees in the AccountEmployees are named users in the Account.@return A Feed containing all Employees Contacts in the account
 */
- (SFApiQuery *)getEmployees;

/**
   @abstract Get List of current Account Clients
   Retrieves the list of Clients in the Account.Clients are restricted users of an Account, that can receive and send filesto Employees, but have no other permissions besides basic sharing with Employees.@return A Feed containing all Clients in the account
 */
- (SFApiQuery *)getClients;

/**
   @abstract Get Account AddressBooks
   Retrieves an address book from the account.Address Books are the contacts of Eployees and Clients, maintained on a personal oraccount-wide basis (shared).
   @param type
   @param searchTerm
   @return A Feed of Contact objects representing the Address Book retrieved
 */
- (SFApiQuery *)getAddressBookWithType:(NSString *)type andSearchTerm:(NSString *)searchTerm;

/**
   @abstract Get Account Mobile Security Settings
   Returns the Mobile device configuration settings for this account@return The current mobile security configuration for this account
 */
- (SFApiQuery *)getMobileSecuritySettings;

/**
   @abstract Get Account Product Defaults
   @return Account defaults
 */
- (SFApiQuery *)getProductDefaults;

/**
   @abstract Get Account Preferences
   @return Account preferences
 */
- (SFApiQuery *)getPreferences;

/**
   @abstract Get Account Single Sign-On Configuration
   Retrieve the Single Sign-on configuration for the Account
   @param provider
   @param idpEntityId
 */
- (SFApiQuery *)getSSOWithProvider:(NSString *)provider andIdpEntityId:(NSString *)idpEntityId;

/**
   @abstract Update Account Single Sign-On Configuration
   @description
   {
   "LogoutUrl":"",
   "LoginUrl":"https://idp.com/signin",
   "IPRestrictions":"+all",
   "ForceSSO":true,
   "EntityID":"http://account.sf-api.com/saml/info",
   "SFIEntityID":"http://idp.com/saml/info",
   "SPInitatedAuthContext":"exact",
   "SPInitatedAuthMethod":"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
   }
   Modifies the Single Sign-on Configuration for this account.
   @param sso
   @param provider
 */
- (SFApiQuery *)updateSSOWithSso:(SFISSOAccountProvider *)sso andProvider:(NSString *)provider;

/**
   @abstract Get List of Accounts for User
   @description
   {
   "password":"password"
   }
   Retrieve the list of Accounts associated with a given userAll parameters to this call may be passed in the Post body as root JSON parameters, or in the URI -with the exception of password that must be provided in the POST body.This operation does not require authentication
   @param username
   @param password
   @param employeesonly
   @param requirehomefolders
   @param singleplane
   @return The list of Accounts associated with this username/password.
 */
- (SFApiQuery *)getByUserWithParameters:(SFIODataObject *)parameters username:(NSString *)username employeesonly:(NSNumber *)employeesonly requirehomefolders:(NSNumber *)requirehomefolders andSingleplane:(NSNumber *)singleplane;

/**
   @abstract Email List of Accounts to User
   Sends the list of accounts to the specified email addressThis operation does not require authentication
   @param email
 */
- (SFApiQuery *)sendToEmailWithEmail:(NSString *)email;

/**
   @abstract Get the Login Access Control List of domains
   Retrieve the list of domains that are allowed or disallowed to login.Whether the list is an allow or disallow listis configured by the AccessControlType property. The domain names are checked against the domains of all theemail addresses of the user that attempts to log in to the Account.@return The Login Access Control List of domains for the Account.
 */
- (SFApiQuery *)getLoginAccessControlDomains;

/**
   @abstract Get the Folder Access Control List of domains
   Retrieve the list of domains that are allowed or disallowed to have access to folders. Whether the list is an allow or disallow listis configured by the AccessControlType property.The list blocks user access to folders by preventing adding a user to distribution groups or folders.The domain names are checked against the domains of all the email addresses of the user.This is an account-wide setting.@return The Folder Access Control List of domains for the Account, e.g.  { "AccessControlType" : "AllowedDomains", "Domains": ["domainA", "domainB", ...] }
 */
- (SFApiQuery *)getFolderAccessControlDomains;

/**
   @abstract Create or replace the Login Access Control List of domains
   @description
   {
   "AccessControlType" : "AllowedDomains",
   "Domains": ["domainA", "domainB", ...]
   }
   
   @param AccessControlType
   @param Domains
   @return The new Login Access Control List of domains for the Account
 */
- (SFApiQuery *)createLoginAccessControlDomainsWithAccessControlDomains:(SFIAccessControlDomains *)accessControlDomains;

/**
   @abstract Create or replace the Folder Access Control List of domains
   @description
   {
   "AccessControlType" : "AllowedDomains",
   "Domains": ["domainA", "domainB", ...]
   }
   
   @param AccessControlType
   @param Domains
   @return The new Folder Access Control List of domains for the Account
 */
- (SFApiQuery *)createFolderAccessControlDomainsWithAccessControlDomains:(SFIAccessControlDomains *)accessControlDomains;

/**
   @abstract Update the Login Access Control List of domains
   @description
   {
   "AccessControlType" : "AllowedDomains",
   "Domains": ["domainA", "domainB", ...]
   }
   Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified.
   @param AccessControlType
   @param Domains
   @return The updated Login Access Control List of domains for the Account
 */
- (SFApiQuery *)updateLoginAccessControlDomainsWithAccessControlDomains:(SFIAccessControlDomains *)accessControlDomains;

/**
   @abstract Update the Folder Access Control List of domains
   @description
   {
   "AccessControlType" : "AllowedDomains",
   "Domains": ["domainA", "domainB", ...]
   }
   Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified. Itallows to add new domains to the list.
   @param AccessControlType
   @param Domains
   @return The updated Folder Access Control List of domains for the Account
 */
- (SFApiQuery *)updateFolderAccessControlDomainsWithAccessControlDomains:(SFIAccessControlDomains *)accessControlDomains;

/**
   @abstract Delete domains from the Logins Access Control List of domains
   @description
   {
   "AccessControlType" : "AllowedDomains",
   "Domains": ["domainA", "domainB", ...]
   }
   Deletes the specified domains from the list.
   @param AccessControlType
   @param Domains
   @return No content
 */
- (SFApiQuery *)deleteLoginAccessControlDomainsWithAccessControlDomains:(SFIAccessControlDomains *)accessControlDomains;

/**
   @abstract Delete domains from the Folder Access Control List of domains
   @description
   {
   "AccessControlType" : "AllowedDomains",
   "Domains": ["domainA", "domainB", ...]
   }
   Deletes the specified domains from the list.
   @param AccessControlType
   @param Domains
   @return No content
 */
- (SFApiQuery *)deleteFolderAccessControlDomainsWithAccessControlDomains:(SFIAccessControlDomains *)accessControlDomains;

/**
   @abstract Check if WebPop is required
   
   @param subdomain
   @param username
   @param singlePlane
   @return RequireWebPopResult
 */
- (SFApiQuery *)requireWebPopWithSubdomain:(NSString *)subdomain username:(NSString *)username andSinglePlane:(NSNumber *)singlePlane;

/**
   @abstract Check if subdomain is required
   
   @param username
   @param singlePlane
   @return RequireSubdomainResult
 */
- (SFApiQuery *)requireSubdomainForUsername:(NSString *)username andSinglePlane:(NSNumber *)singlePlane;

/**
   @abstract Find Subdomain
   @description
   {
   "UsernameShort":"usernameShort",
   "Password":"pass",
   "EmployeeOnly":false
   }
   Find the user account information based on the short username
   @param findSubdomainParams
   @param singlePlane
   @return FindSubdomainResult
 */
- (SFApiQuery *)findSubdomainWithFindSubdomainParams:(SFIFindSubdomainParams *)findSubdomainParams andSinglePlane:(NSNumber *)singlePlane;

/**
   @abstract Get Outlook Information
   @return OutlookInformation
 */
- (SFApiQuery *)getOutlookInformation;

/**
   @abstract Get SSO Info
   
   @param subdomain
   @return SSOInfo
 */
- (SFApiQuery *)getSSOInfoWithSubdomain:(NSString *)subdomain;

/**
   @abstract Get the tenants of a partner account
   @return List of tenant accounts managed by this partner account, if any
 */
- (SFApiQuery *)getTenants;
- (SFApiQuery *)getTenantsWithId:(NSString *)Id;

/**
   @abstract Get list of multi-tenant zones assigned to a tenant.
   
   @param parentid
   @return List of multi-tenant zones assigned to the tenant
 */
- (SFApiQuery *)getZonesWithParentid:(NSString *)parentid;
@end
