//
//  SFISharesEntity.h
//
//  Autogenerated by a tool.
//  Copyright (c) 2016 Citrix ShareFile. All rights reserved.
//

#import "SFIODataEntityBase.h"

@class SFIShare;
@class SFIShareSendParams;
@class SFIShareRequestParams;
@class SFIShareResendParams;
@class SFIUploadRequestParams;

@interface SFISharesEntity : SFIODataEntityBase
{

}

/**
@abstract Get List of Shares
Retrieve all outstanding Shares of the authenticated user@return List of Shares created by the authenticated user
*/
-(SFApiQuery*)get;

/**
@abstract Get Share
Retrieve a single Share entity. If the Share allows anonymous access, then this method will notrequire authentication.	
@param id 	
@return A single Share
*/
-(SFApiQuery*)getWithUrl:(NSURL*)url;

/**
@abstract Get Recipients of a Share
Retrieve the list of Recipients in the share. Recipients represent the target users of the Share, containingaccess information, such as number of times that user downloaded files from the share. Each Recipient isidentified by an Alias, which is an unique ID given to each user - allowing tracking of downloads fornon-authenticated users.	
@param id 	
@return A feed of Share Aliases representing recipients of the Share
*/
-(SFApiQuery*)getRecipientsWithUrl:(NSURL*)url;

/**
@abstract Get Recipient of a Share
Retrieve a single Share Recipient identified by the alias id.	
@param parentUrl 	
@param id 	
@return A Share Alias representing a single recipient of the Share
*/
-(SFApiQuery*)getRecipientsWithParentUrl:(NSURL*)parentUrl andId:(NSString*)Id;

/**
@abstract Create Recipient for a Share
Creates a Recipient User for a Share that requires user information	
@param parentUrl 	
@param Email 	
@param FirstName 	
@param LastName 	
@param Company 	
@return A Share Alias representing a single recipient of the Share
*/
-(SFApiQuery*)createRecipientsWithParentUrl:(NSURL*)parentUrl email:(NSString*)Email firstName:(NSString*)FirstName lastName:(NSString*)LastName andCompany:(NSString*)Company;

/**
@abstract Get Items of a Share
Retrieve the list of Items (files and folders) in the Send Share.	
@param id 	
@return A feed of Items of the Share
*/
-(SFApiQuery*)getItemsWithUrl:(NSURL*)url;

/**
@abstract Get Items of a Send Share
Retrieve a single Item in the Send Share	
@param shareUrl 	
@param itemid 	
@return An item in the Share
*/
-(SFApiQuery*)getItemsWithShareUrl:(NSURL*)shareUrl andItemid:(NSString*)itemid;

/**
@abstract Get Thumbnail of a Share Item
Retrieve a thumbnail link for the specified Item in the Share.	
@param shareUrl 	
@param itemid 	
@param size 	
@param redirect 	
@return A 302 redirection to the Thumbnail link
*/
-(SFApiQuery*)thumbnailWithShareUrl:(NSURL*)shareUrl itemid:(NSString*)itemid size:(NSNumber*)size andRedirect:(NSNumber*)redirect;

/**
@abstract Get List of Protocol Links of a Share item
	
@param shareUrl 	
@param itemid 	
@param platform 	
@return A list of protocol links depending on the input parameter 'platform', 404 (Not Found) if not supported by the item
*/
-(SFApiQuery*)protocolLinksWithShareUrl:(NSURL*)shareUrl itemid:(NSString*)itemid andPlatform:(NSString*)platform;

/**
@abstract Downloads Share Items
Downloads items from the Share. The default action will download all Items in the Share.If a Share has a single item, the download attachment namewill use the item name. Otherwise, the download will contain a ZIP archive containing allfiles and folders in the share, named Files.zip.To download Shares that require authentication, make sure this request is authenticated. To downloadshares that require require user information, provide the Name, Email and Company parameters in the URIquery. Anyone can download files from anonymous shares.You can also download individual Items in the Share. Use the Share(id)/Items(id)/Download action. Theitem ID must be a top-level item in the Share - i.e., you cannot download or address files contained insidea shared folder.	
@param shareUrl 	
@param itemId 	
@param Name 	
@param Email 	
@param Company 	
@param redirect 	
@return Redirects the caller (302) to the download address for the share contents.
*/
-(SFApiQuery*)downloadWithShareUrl:(NSURL*)shareUrl itemId:(NSString*)itemId name:(NSString*)Name email:(NSString*)Email company:(NSString*)Company andRedirect:(NSNumber*)redirect;

/**
@abstract Download Items from a Share for a Recipient
@description
GET https://account.sf-api.com/sf/v3/Shares(shareid)/Recipients(aliasid)/DownloadWithAlias?id=itemid
GET https://account.sf-api.com/sf/v3/Shares(shareid)/Recipients(aliasid)/DownloadWithAlias(itemid)
Downloads items from the Share. The default action will download all Items in the Share.If a Share has a single item, the download attachment namewill use the item name. Otherwise, the download will contain a ZIP archive containing allfiles and folders in the share, named Files.zip.To download Shares that require user informaion ( Email, First Name, Last Name and Company), make sureto create an Recipient (alias)To download Shares that require authentication, make sure this request is authenticated.Anyone can download files from anonymous shares.You can also download individual Items in the Share. Use the Shares(id)/Recipients(aliasid)/Download action. Theitem ID must be a top-level item in the Share - i.e., you cannot download or address files contained insidea shared folder.	
@param shareUrl 	
@param aliasid 	
@param itemId 	
@param redirect 	
@return Redirects the caller (302) to the download address for the share contents.
*/
-(SFApiQuery*)downloadWithAliasWithShareUrl:(NSURL*)shareUrl aliasid:(NSString*)aliasid itemId:(NSString*)itemId andRedirect:(NSNumber*)redirect;

/**
@abstract Download Multiple Items from a Share for a Recipient
@description
["id1","id2",...]
Download Multiple Items from a Share for a Recipient. The download will contain a ZIP archive containing allfiles and folders in the share, named Files.zip.To download Shares that require user informaion ( Email, First Name, Last Name and Company), make sureto create an Recipient (alias) and pass in the alaisId.To download Shares that require authentication, make sure this request is authenticated.Anyone can download files from anonymous shares.	
@param shareUrl 	
@param aliasid 	
@param ids 	
@param redirect 	
@return Redirects the caller (302) to the download address for the share contents.
*/
-(SFApiQuery*)bulkDownloadWithShareUrl:(NSURL*)shareUrl aliasid:(NSString*)aliasid ids:(NSArray*)ids andRedirect:(NSNumber*)redirect;

/**
@abstract Create Share
@description
{
"ShareType":"Send",
"Title":"Sample Send Share",
"Items": [ { "Id":"itemid" }, {...} ],
"Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
"ExpirationDate": "2013-07-23",
"RequireLogin": false,
"RequireUserInfo": false,
"MaxDownloads": -1,
"UsesStreamIDs": false
}
{
"ShareType":"Request",
"Title":"Sample Request Share",
"Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
"Parent": { "Id":"folderid" },
"ExpirationDate": "2013-07-23",
"RequireLogin": false,
"RequireUserInfo": false,
"TrackUntilDate": "2013-07-23",
"SendFrequency": -1,
"SendInterval": -1
}
Creates a new Send or Request Share.Expiration date:- if not specified the default is 30 days- "9999-12-31" disables share expiration.To use stream IDs as item IDs UsesStreamIDs needs to be set to true, and all the IDs in Items need to be specifiedas stream IDs.	
@param share 	
@param notify 	
@return The new Share
*/
-(SFApiQuery*)createWithShare:(SFIShare*)share andNotify:(NSNumber*)notify;

/**
@abstract Update Share
@description
{
"Title": "New Title",
"ExpirationDate": "2013-07-23",
"RequireLogin": false,
"Items": [ { "Id":"itemid" }, {...} ],
}
Modifies an existing Share. If Items are specified they are added to the share.	
@param id 	
@param share 	
@return The modified Share
*/
-(SFApiQuery*)updateWithUrl:(NSURL*)url andShare:(SFIShare*)share;

/**
@abstract Delete Share
Removes an existing Share	
@param id 	
*/
-(SFApiQuery*)deleteWithUrl:(NSURL*)url;

/**
@abstract Create Share Alias
Creates a share alias for the specified share ID and user email. If a user with the given email address does notexist it is created first.For shares requiring login an activation email is sent to the created user. If 'notify' is enabled, the user activation isincluded in the share notification email.	
@param id 	
@param email 	
@param notify 	
@return Share with the AliasID property set to the created alias ID
*/
-(SFApiQuery*)createAliasWithUrl:(NSURL*)url email:(NSString*)email andNotify:(NSNumber*)notify;

/**
@abstract Deliver Send a File Email
@description
{
"Items":["itemId1", "itemId2", ...],
"Emails":["email@sharefile.com", "email2@sharefile.com",...]
"Subject": "Email Subject",
"Body": "Email Message",
"CcSender": false,
"NotifyOnDownload": true,
"RequireLogin": false,
"MaxDownloads": 30,
"ExpirationDays": -1
}
Sends an Email to the specified list of addresses, containing a link to the specified Items.The default number of expiration days is 30. Setting it to -1 disables share expiration. Note that theEmails and Items parameters expect an array of strings, rather than nested JSON objects.	
@param parameters 	
@return Share object
*/
-(SFApiQuery*)createSendWithParameters:(SFIShareSendParams*)parameters;

/**
@abstract Deliver Request a File Email
@description
{
"FolderId":"folderId",
"Emails":["email@sharefile.com", "email2@sharefile.com",...]
"Subject": "Email Subject",
"Body": "Email Message",
"CcSender": false,
"NotifyOnUpload": true,
"RequireLogin": false,
"ExpirationDays": -1
}
Sends an Email to the specified list of addresses, containing a link to upload to the specified folder.The default number of expiration days is 30. Setting it to -1 disables share expiration. Note that theEmails parameter expectd an array of strings, rather than nested JSON objects.	
@param parameters 	
*/
-(SFApiQuery*)createRequestWithParameters:(SFIShareRequestParams*)parameters;

/**
@abstract Re-deliver an Existing Share Link
@description
{
"Recipients":["email@sharefile.com", "groupId",...]
"Subject": "Email Subject",
"Body": "Email Message",
"CcSender": false,
"NotifyOnUse": true,
"ShareId": "shareId"
}
Resends an Email to the specified list of addresses, containing a link to a Send or Request Share	
@param parameters 	
@return The updated Share
*/
-(SFApiQuery*)resendWithParameters:(SFIShareResendParams*)parameters;

/**
@abstract Upload File to Request Share
@description
POST https://account.sf-api.com/sf/v3/Shares(id)/Upload2
{
"Method":"Method",
"Raw": false,
"FileName":"FileName"
"FileLength": length
}
Prepares the links for uploading files to the target Share.This method returns an Upload Specification object. The fields arepopulated based on the upload method, provider, and resume parameters passed to theupload call.The Method determines how the URLs must be called.Standard uploads use a single HTTP POST message to the ChunkUri address provided inthe response. All other fields will be empty. Standard uploads do not support Resume.Streamed uploads use multiple HTTP POST calls to the ChunkUri address. The client mustappend the parameters index, offset and hash to the end of the ChunkUri address. Indexis a sequential number representing the data block (zero-based); Offset represents thebyte offset for the block; and hash contains the MD5 hash of the block. The last HTTPPOST must also contain finish=true parameter.Threaded uploads use multiple HTTP POST calls to ChunkUri, and can have a number ofthreads issuing blocks in parallel. Clients must append index, offset and hash tothe end of ChunkUri, as explained in Streamed. After all chunks were sent, the clientmust call the FinishUri provided in this spec.For all uploaders, the contents of the POST Body can either be "raw", if the "Raw" parameterwas provided to the Uploader, or use MIME multi-part form encoding otherwise. Raw uploadssimply put the block content in the POST body - Content-Length specifies the size. Multi-partform encoding has to pass the File as a Form parameter named "File1".For streamed and threaded, if Resume options were provided to the Upload call, then thefields IsResume, ResumeIndex, ResumeOffset and ResumeFileHash MAY be populated. If they are,it indicates that the server has identified a partial upload with that specification, and isready to resume on the provided parameters. The clients can then verify the ResumeFileHash toensure the file has not been modified; and continue issuing ChunkUri calls from the ResumeIndexResumeOffset parameters. If the client decides to restart, it should simply ignore the resumeparameters and send the blocks from Index 0.For all uploaders: the result code for the HTTP POST calls to Chunk and Finish Uri can eitherbe a 401 - indicating authentication is required; 4xx/5xx indicating some kind of error; or200 with a Content Body of format 'ERROR:message'. Successful calls will return either a 200response with no Body, or with Body of format 'OK'.	
@param id 	
@param method 	
@param raw 	
@param fileName 	
@param fileSize 	
@param batchId 	
@param batchLast 	
@param canResume 	
@param startOver 	
@param unzip 	
@param tool 	
@param overwrite 	
@param title 	
@param details 	
@param isSend 	
@param sendGuid 	
@param opid 	
@param threadCount 	
@param responseFormat 	
@param notify 	
@return an Upload Specification element, containing the links for uploading, and the parameters for resume. The caller must know the protocol for sending the prepare, chunk and finish URLs returned in the spec; as well as negotiate the resume upload.
*/
-(SFApiQuery*)uploadWithUrl:(NSURL*)url method:(NSString*)method raw:(NSNumber*)raw fileName:(NSString*)fileName fileSize:(NSNumber*)fileSize batchId:(NSString*)batchId batchLast:(NSNumber*)batchLast canResume:(NSNumber*)canResume startOver:(NSNumber*)startOver unzip:(NSNumber*)unzip tool:(NSString*)tool overwrite:(NSNumber*)overwrite title:(NSString*)title details:(NSString*)details isSend:(NSNumber*)isSend sendGuid:(NSString*)sendGuid opid:(NSString*)opid threadCount:(NSNumber*)threadCount responseFormat:(NSString*)responseFormat notify:(NSNumber*)notify clientCreatedDateUTC:(NSDate*)clientCreatedDateUTC clientModifiedDateUTC:(NSDate*)clientModifiedDateUTC andExpirationDays:(NSNumber*)expirationDays;
-(SFApiQuery*)upload2WithUrl:(NSURL*)url uploadParams:(SFIUploadRequestParams*)uploadParams andExpirationDays:(NSNumber*)expirationDays;

/**
@abstract Get Redirection endpoint Information
Returns the redirection endpoint for this Share.	
@param id 	
@return The Redirection endpoint Information
*/
-(SFApiQuery*)getRedirectionWithUrl:(NSURL*)url;

/**
@abstract Get Inbox for Recipient
Retrieve all outstanding Shares in the inbox.	
@param userId 	
@return List of Shares created by the authenticated user
*/
-(SFApiQuery*)getInboxWithUserId:(NSString*)userId type:(NSString*)type andArchived:(NSNumber*)archived;

/**
@abstract Get Sent Message Content by Share
Returns sent message content.	
@param shareUrl 	
@param aliasId 	
@return Sent Message Content
*/
-(SFApiQuery*)messageWithShareUrl:(NSURL*)shareUrl andAliasId:(NSString*)aliasId;
@end
