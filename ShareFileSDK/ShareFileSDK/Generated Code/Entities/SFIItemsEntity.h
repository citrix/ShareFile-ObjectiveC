//
//  SFIItemsEntity.h
//
//  Autogenerated by a tool.
//  Copyright (c) 2016 Citrix ShareFile. All rights reserved.
//

#import "SFIODataEntityBase.h"

@class SFIFolder;
@class SFINote;
@class SFILink;
@class SFISymbolicLink;
@class SFIItem;
@class SFIUploadRequestParams;
@class SFISimpleSearchQuery;
@class SFISearchQuery;

@interface SFIItemsEntity : SFIODataEntityBase
{

}

/**
@abstract Get HomeFolder for Current User
Returns home folder for current user.Note that home folders are not available for client users, or if the account doesn't have the "My Files & Folders" feature enabled.@return home folder for current user
*/
-(SFApiQuery*)get;

/**
@abstract Get Item by ID
Returns a single Item.Special Id's:home, favorites, allshared, connectors, box, top. home - Return home folder.favorites - Return parent favorite item; use .../Items(favorites)/Children to get the favorite folders.allshared - Return parent Shared Folders item; use .../Items(allshared)/Children to get the shared folders.connectors - Return parent Connectors item; use .../Items(connectors)/Children to get indiviual connectors.box - Return the FileBox folder. top - Returns the Top item; use .../Items(top)/Children to get the home, favorites, and shared folders as well as the connectors	
@param id 	
@param includeDeleted 	
@return a single Item
*/
-(SFApiQuery*)getWithUrl:(NSURL*)url andIncludeDeleted:(NSNumber*)includeDeleted;

/**
@abstract Get TreeView
Retrieves a folder list structure tailored for TreeView navigation - used by clientsto create folder trees for specific operations.This operation will enforce a specific $select and $expand operators. You can provideadditional $expand, for example Children, which is not added by default. The $selectoperator will apply to the expanded objects as well. You can also specify additional$select elements.	
@param id 	
@param treeMode 	
@param sourceId 	
@param canCreateRootFolder 	
@param fileBox 	
@return A tree root element.
*/
-(SFApiQuery*)getWithUrl:(NSURL*)url treeMode:(NSString*)treeMode sourceId:(NSString*)sourceId canCreateRootFolder:(NSNumber*)canCreateRootFolder andFileBox:(NSNumber*)fileBox;

/**
@abstract Get Symbolic Links of a Connector Group
Retrieves the Symbolic Links of the provided Connector Group type. Connector Groups defineclasses of external data connectors - such as SharePoint, Network Shares. Symbolic Linksrepresent a single Connector point to such classes - for example, a single SharePoint site,or a network share drive.	
@param parentUrl 	
@return The list of Symbolic Links associated with the given connector group.
*/
-(SFApiQuery*)getChildrenByConnectorGroupWithParentUrl:(NSURL*)parentUrl;

/**
@abstract Get Stream
Retrieves the versions of a given Stream. The ID parameter must be a StreamID, otherwise an empty list is returned.StreamID is a property of all Items, representing the "Stream", ie., the collection of all versions of a file. Incontrast, an Item ID represents a single version of a file.For example, when users upload or modify an existing file, a new Itemis created with the same StreamID. All default Item enumerations return only the latest version of a given stream.Use this method to retrieve previous versions of a given stream.This method carries a default OData $top parameter of 20. If more versions are required, specify the $top queryoption with the desired parameter.	
@param id 	
@param includeDeleted 	
*/
-(SFApiQuery*)streamWithUrl:(NSURL*)url andIncludeDeleted:(NSNumber*)includeDeleted;

/**
@abstract Get Item by Path
Retrieves an item from its path. The path is of format /foldername/foldername/filenameThis call may redirect the client to another API provider, if the pathcontains a symbolic link.	
@param path 	
@return An item identified by a path
*/
-(SFApiQuery*)byPathWithPath:(NSString*)path;

/**
@abstract Get Item by relative Path from ID
Retrieves an item from its path, relative to the provided ID.The path is of format /foldername/foldername/filenameThis call may redirect the client to another API provider, if the pathcontains a symbolic link.	
@param id 	
@param path 	
@return An item identified by a path
*/
-(SFApiQuery*)byPathWithUrl:(NSURL*)url andPath:(NSString*)path;

/**
@abstract Get Parent Item
Retrieves the Parent navigation property of a single Item.	
@param id 	
@return the Parent Item of the give object ID.
*/
-(SFApiQuery*)getParentWithUrl:(NSURL*)url;

/**
@abstract Get Children
Handler for the Children navigation property of a given Item.A 302 redirection is returned if the folder is a SymbolicLink. The redirectionwill enumerate the children of the remote connector	
@param id 	
@param includeDeleted 	
@param orderingMode 	
@return the list of children under the given object ID
*/
-(SFApiQuery*)getChildrenWithUrl:(NSURL*)url includeDeleted:(NSNumber*)includeDeleted andOrderingMode:(NSString*)orderingMode;

/**
@abstract Get Folder Access Info
Returns the effective Access Controls for the current authenticated user for theselected folder - i.e., the resulting set of Access Controls for the Item/User context.This operation applies to Folders only, will return an error for other Item types.	
@param id 	
@return The Folder Access Control Information
*/
-(SFApiQuery*)getInfoWithUrl:(NSURL*)url;

/**
@abstract Download Item Content
Initiate the download operation for an item. It will return 302 redirection to theactual download link. For Folders, the download link will retrieve a ZIP archivewith the contents of the Folder.	
@param id 	
@param redirect 	
@param includeAllVersions 	
@return the download link for the provided item content.
*/
-(SFApiQuery*)downloadWithUrl:(NSURL*)url redirect:(NSNumber*)redirect andIncludeAllVersions:(NSNumber*)includeAllVersions;

/**
@abstract Download Multiple Items
@description
["id1","id2",...]
Initiate the download operation for items. It will return 302 redirection to theactual download link.	
@param parentUrl 	
@param ids 	
@param redirect 	
@return the download link for the provided item content.
*/
-(SFApiQuery*)bulkDownloadWithParentUrl:(NSURL*)parentUrl ids:(NSArray*)ids andRedirect:(NSNumber*)redirect;

/**
@abstract Create Folder
@description
{
"Name":"Folder Name",
"Description":"Description",
"Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" }
}
Creates a new Folder.The POST body must contain the serialized object.For top-level folders, use Items/Folder.The Zone object may only be provided for top-level folders. The Zone object mustcontain a zone ID.	
@param parentUrl 	
@param folder 	
@param overwrite 	
@param passthrough 	
@return the new Folder
*/
-(SFApiQuery*)createFolderWithParentUrl:(NSURL*)parentUrl folder:(SFIFolder*)folder overwrite:(NSNumber*)overwrite andPassthrough:(NSNumber*)passthrough;

/**
@abstract Create Note
@description
{
"Name":"Note Name",
"Description":"Description"
}
Creates a new Note.	
@param parentUrl 	
@param note 	
@return the new Note
*/
-(SFApiQuery*)createNoteWithParentUrl:(NSURL*)parentUrl andNote:(SFINote*)note;

/**
@abstract Create Link
@description
{
"Name":"Link Name",
"Description":"Description",
"Uri":"https://server/path"
}
Creates a new Link	
@param parentUrl 	
@param link 	
@return the new Link
*/
-(SFApiQuery*)createLinkWithParentUrl:(NSURL*)parentUrl andLink:(SFILink*)link;

/**
@abstract Create SymbolicLink
@description
{
"Name":"RemoteFileName",
"Description":"Description",
"Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" },
"ConnectorGroup": { "Id":"1" }
}
Creates a Symbolic LinkThe body must contain either a "Link" parameter with a fully qualified URI; or useFileName + Zone to have sharefile.com attempt to convert the Connector path to anURI using a call to the Zone - using ShareFile Hash authentication mode. For activeclients, it's recommended to make the convertion call to the Zone directly, usingItems/ByPath=name, retriving the resulting URL, and calling this method with theLink parameter.SymbolicLinks must be created as top-level folders - i.e., this call requiresthe parent to be the Item(accountid) element.Zone defines the location of the SymbolicLink target - for example, forNetwork Shares connectors, the SymbolicLink will point to the StorageZone Controllerthat will serve the file browsing requests.The ConnectorGroup parameter indicates the kind of symbolic link - e.g., NetworkShare, or SharePoint.	
@param parentUrl 	
@param symlink 	
@param overwrite 	
@return the new SymbolicLink
*/
-(SFApiQuery*)createSymbolicLinkWithParentUrl:(NSURL*)parentUrl symlink:(SFISymbolicLink*)symlink andOverwrite:(NSNumber*)overwrite;

/**
@abstract Creates SymbolicLink
@description
{
"Name":"RemoteFileName",
"Description":"Description",
"Link":"https://server/provider/version/Items(id)",
"Zone":{ "Id":"z014766e-8e96-4615-86aa-57132a69843c" },
"ConnectorGroup": { "Id":"1" }
}
	
@param id 	
@param symlink 	
@param overwrite 	
@return the new SymbolicLink
*/
-(SFApiQuery*)createChildrenByConnectorGroupWithUrl:(NSURL*)url symlink:(SFISymbolicLink*)symlink andOverwrite:(NSNumber*)overwrite;

/**
@abstract Update Item
@description
{
"Name":"Name",
"FileName":"FileName",
"Description":"Description",
"ExpirationDate": "date",
"Parent": { "Id": "parentid" },
"Zone": { "Id": "zoneid" }
}
Updates an Item object. Please note that for a Folder, the Name and FileName properties must be consistent.If a new Name is provided, the FileName will also be updated with the new name, and viceversa.If both Name and FileName are provided, FileName is disregarded and Name will be used to update both properties.	
@param id 	
@param item 	
@param forceSync 	
@param notify 	
@return A modified Item object. If the item Zone or Parent Zone is modified, then this method will return an Asynchronous operation record instead. Note: the parameters listed in the body of the request are the only parameters that can be updated through this call.
*/
-(SFApiQuery*)updateWithUrl:(NSURL*)url item:(SFIItem*)item batchid:(NSString*)batchid batchSizeInBytes:(NSNumber*)batchSizeInBytes forceSync:(NSNumber*)forceSync scheduleAsync:(NSNumber*)scheduleAsync resolveFolderNameConflict:(NSNumber*)resolveFolderNameConflict andNotify:(NSNumber*)notify;

/**
@abstract Update Link
@description
{
"Name":"Name",
"Uri":"https://server/path",
"Description":"Description",
"Parent": { "Id": "parentid" },
}
Updates a Link object	
@param id 	
@param link 	
@param notify 	
@return A modified Link object
*/
-(SFApiQuery*)updateLinkWithId:(NSString*)Id link:(SFILink*)link andNotify:(NSNumber*)notify;

/**
@abstract Update Note
@description
{
"Name":"Name",
"Description":"Description",
"Parent": { "Id": "parentid" },
}
Updates a Note object	
@param id 	
@param note 	
@param notify 	
@return The modified Note object
*/
-(SFApiQuery*)updateNoteWithId:(NSString*)Id note:(SFINote*)note andNotify:(NSNumber*)notify;

/**
@abstract Update SymbolicLink
@description
{
"Name":"Name",
"Description":"Description",
"Link": "https://server/path"
}
Updates a Symbolic Link object	
@param id 	
@param symlink 	
@return The modified SymbolicLink object
*/
-(SFApiQuery*)updateSymbolicLinkWithId:(NSString*)Id andSymlink:(SFISymbolicLink*)symlink;

/**
@abstract Delete Item
Removes an item	
@param id 	
@param singleversion 	
@param forceSync 	
*/
-(SFApiQuery*)deleteWithUrl:(NSURL*)url singleversion:(NSNumber*)singleversion andForceSync:(NSNumber*)forceSync;

/**
@abstract Delete Multiple Items
@description
["id1","id2",...]
All items in bulk delete must be children of the same parent, identified in the URI	
@param parentUrl 	
@param ids 	
@param forceSync 	
@param deletePermanently 	
*/
-(SFApiQuery*)bulkDeleteWithParentUrl:(NSURL*)parentUrl ids:(NSArray*)ids forceSync:(NSNumber*)forceSync andDeletePermanently:(NSNumber*)deletePermanently;

/**
@abstract Get Thumbnail
Retrieve a thumbnail link from the specified Item.	
@param id 	
@param size 	
@param redirect 	
@return A 302 redirection to the Thumbnail link
*/
-(SFApiQuery*)getThumbnailWithUrl:(NSURL*)url size:(NSNumber*)size andRedirect:(NSNumber*)redirect;

/**
@abstract Get Breadcrumbs
Retrieves the path from an item from the root. The return list is a Feed of Items, with the top-levelfolder at the first position. If this item is in a Connection path, the breadcrumbs may contain URLreference back to the parent account - and the Item in the feed will contain just the URL reference.	
@param id 	
@param path 	
@return A feed containing the path of folders from the specified root to the item, in order
*/
-(SFApiQuery*)getBreadcrumbsWithUrl:(NSURL*)url andPath:(NSString*)path;

/**
@abstract Copy Item
Copies an item to a new target Folder. If the target folder is in another zone, the operation willreturn an AsyncOperation record instead. Clients may query the /AsyncOperation Entity to determineoperation progress and result.	
@param id 	
@param targetid 	
@param overwrite 	
@return the modified source object
*/
-(SFApiQuery*)copyWithUrl:(NSURL*)url targetid:(NSString*)targetid andOverwrite:(NSNumber*)overwrite;

/**
@abstract Upload File
@description
POST https://account.sf-api.com/sf/v3/Items(id)/Upload2
{
"Method":"Method",
"Raw": false,
"FileName":"FileName"
"FileLength": length
}
Prepares the links for uploading files to the target Folder.This method returns an Upload Specification object. The fields arepopulated based on the upload method, provider, and canResume parameters passed to theupload call.The Method determines how the URLs must be called.There are two different URLs for upload: /sf/v3/Items(id)/Upload accepts parametersthrough the URL query string, while /sf/v3/Items(id)/Upload2 uses the HTTP POST message body.If using 'Upload2', the parameters must be capitalized.Standard uploads use a single HTTP POST message to the ChunkUri address provided inthe response. All other fields will be empty. Standard uploads do not support Resume.Streamed uploads use multiple HTTP POST calls to the ChunkUri address. For each call, the clientmust append the parameters index, byteOffset and hash to the ChunkUri address. Index is asequential number (zero-based) identifying the position of the chunk relative to others;byteOffset represents how many bytes precede the chunk relative to the beginning of the file;and hash contains the MD5 hash of the chunk. The last HTTP POST must also include the parametersfinish=true and filehash=[MD5 hash of entire file].Threaded uploads use multiple HTTP POST calls to ChunkUri, and can have a number ofthreads issuing chunks in parallel. Clients must append index, byteOffset and hash tothe end of ChunkUri, as explained for Streamed uploads. After all chunks are sent, the clientmust call the FinishUri provided in the Upload Specification response.If using the Threaded Uploader, the client can add the parameter fmt=json to the ChunkUrito retrieve the Item ID of the file after the upload is completed.For all uploaders, the contents of the POST Body can either be "raw" (if the parameter raw=trueis provided to the Uploader) or use MIME multi-part form encoding otherwise. Raw uploadsprovide the chunk content directly in the POST body and the Content-Length header specifies the size.Multi-part form encoding requires passing the file as a Form parameter named "Filedata".For Streamed and Threaded uploads, if the CanResume parameter is specified in the call to Upload,then the fields IsResume, ResumeIndex, ResumeOffset and ResumeFileHash may be populated in theUpload Specification response. If they are, it indicates that the server has identified a partialupload with that specification and is ready to resume the upload process. The client canverify the file has not been modified based on the value of ResumeFileHash, then continue issuingcalls to the ChunkUri starting from the position represented by the values of ResumeIndex andResumeOffset. If the client decides to restart the upload, it should simply ignore the resumefields and send chunks starting from Index 0.For all upload methods, successful HTTP POST calls to ChunkUri and FinishUri will return responsecode 200 with either no Content Body or with a Body of 'OK'. The response code for failed calls canbe 401, indicating authentication is required; 4xx/5xx, indicating some kind of error; or200 with Content Body of format 'ERROR:[message]'.	
@param id 	
@param method 	
@param raw 	
@param fileName 	
@param fileSize 	
@param batchId 	
@param batchLast 	
@param canResume 	
@param startOver 	
@param unzip 	
@param tool 	
@param overwrite 	
@param title 	
@param details 	
@param isSend 	
@param sendGuid 	
@param opid 	
@param threadCount 	
@param responseFormat 	
@param notify 	
@param clientCreatedDateUTC 	
@param clientModifiedDateUTC 	
@return an Upload Specification element, containing the links for uploading, and the parameters for resume. The caller must know the protocol for sending the prepare, chunk and finish URLs returned in the spec; as well as negotiate the resume upload.
*/
-(SFApiQuery*)uploadWithUrl:(NSURL*)url method:(NSString*)method raw:(NSNumber*)raw fileName:(NSString*)fileName fileSize:(NSNumber*)fileSize batchId:(NSString*)batchId batchLast:(NSNumber*)batchLast canResume:(NSNumber*)canResume startOver:(NSNumber*)startOver unzip:(NSNumber*)unzip tool:(NSString*)tool overwrite:(NSNumber*)overwrite title:(NSString*)title details:(NSString*)details isSend:(NSNumber*)isSend sendGuid:(NSString*)sendGuid opid:(NSString*)opid threadCount:(NSNumber*)threadCount responseFormat:(NSString*)responseFormat notify:(NSNumber*)notify clientCreatedDateUTC:(NSDate*)clientCreatedDateUTC clientModifiedDateUTC:(NSDate*)clientModifiedDateUTC andExpirationDays:(NSNumber*)expirationDays;
-(SFApiQuery*)upload2WithUrl:(NSURL*)url uploadParams:(SFIUploadRequestParams*)uploadParams andExpirationDays:(NSNumber*)expirationDays;

/**
@abstract Unlock File
Unlock a locked file.This operation is only implemented in Sharepoint providers (/sp)	
@param id 	
@param message 	
*/
-(SFApiQuery*)checkInWithUrl:(NSURL*)url andMessage:(NSString*)message;
-(SFApiQuery*)checkOutWithUrl:(NSURL*)url;
-(SFApiQuery*)discardCheckOutWithUrl:(NSURL*)url;

/**
@abstract Search
Search for Items matching the criteria of the query parameter	
@param query 	
@param maxResults 	
@param skip 	
@param homeFolderOnly 	
@return SearchResults
*/
-(SFApiQuery*)searchWithQuery:(NSString*)query maxResults:(NSNumber*)maxResults skip:(NSNumber*)skip andHomeFolderOnly:(NSNumber*)homeFolderOnly;

/**
@abstract Advanced Simple Search
@description
{
"Query":{
"ItemType":"",
"ParentID":"",
"CreatorID":"",
"SearchQuery":"",
"CreateStartDate":"",
"CreateEndDate":"",
"ItemNameOnly":false
},
"Paging":{
"PageNumber":1, (Deprecated)
"PageSize":10, (Deprecated)
"Count": 50
"Skip": 0
},
"Sort":{
"SortBy":"",
"Ascending":false,
},
"TimeoutInSeconds":10
}
Search for Items matching the criteria of the query parameter	
@param simpleSearchQuery 	
@return AdvancedSearchResults
*/
-(SFApiQuery*)advancedSimpleSearchWithSimpleSearchQuery:(SFISimpleSearchQuery*)simpleSearchQuery;

/**
@abstract Advanced Search
@description
{
"Query":{
"ItemTypes":["type1", "type2", ...],
"ParentID":["id1", "id2", ...],
"CreatorID":["id1", "id2", ...],
"SearchQuery":"",
"CreateStartDate":"",
"CreateEndDate":"",
"ItemNameOnly":false
},
"Paging":{
"PageNumber":1, (deprecated)
"PageSize":10, (deprecated)
"Count":50, (default value)
"Skip":0, (default value)
},
"Sort":{
"SortBy":"",
"Ascending":false,
},
"TimeoutInSeconds":10
}
Search for Items matching the criteria of the query parameter	
@param searchQuery 	
@return AdvancedSearchResults
*/
-(SFApiQuery*)advancedSearchWithSearchQuery:(SFISearchQuery*)searchQuery;

/**
@abstract Get Web Preview Link
Redirects the caller to the Web Edit application for the selected item.	
@param id 	
@return A redirection message to the Web Edit app for this item. It returns 404 (Not Found) if the Web Preview app doesn't support the file type.
*/
-(SFApiQuery*)webViewWithUrl:(NSURL*)url;

/**
@abstract Get List of Item Protocol Links
	
@param id 	
@param platform 	
@return A list of protocol links depending on the input parameter 'platform', 404 (Not Found) if not supported by the item
*/
-(SFApiQuery*)getProtocolLinksWithUrl:(NSURL*)url andPlatform:(NSString*)platform;

/**
@abstract Get Redirection endpoint Information
Returns the redirection endpoint for this Item.This operation applies to Folders and SymbolicLinks only, will return an error for other Item types.	
@param id 	
@return The Redirection endpoint Information
*/
-(SFApiQuery*)getRedirectionWithUrl:(NSURL*)url;

/**
@abstract Get a collection of recoverable/deleted items in a folder
	
@param url 	
*/
-(SFApiQuery*)getDeletedChildrenWithUrl:(NSURL*)url andId:(NSString*)Id;
-(SFApiQuery*)getUserDeletedItemsWithUserid:(NSString*)userid andZone:(NSString*)zone;

/**
@abstract Restore expired items to their original locations
	
@param ids 	
*/
-(SFApiQuery*)bulkRestoreWithIds:(NSArray*)ids;

/**
@abstract Permanently delete multiple items
	
@param itemIds 	
@param ids 	
*/
-(SFApiQuery*)bulkDeletePermanentlyWithIds:(NSArray*)ids;

/**
@abstract Create a one-time use login Uri for the Web App.
	
@param id 	
@return Redirection populated with link in Uri field
*/
-(SFApiQuery*)webAppLinkWithUrl:(NSURL*)url;

/**
@abstract Remove folder template association from folder
	
@param url 	
*/
-(SFApiQuery*)removeTemplateAssociationWithUrl:(NSURL*)url andId:(NSString*)Id;

/**
@abstract Check if template is already part of an existing template structure
	
@param url 	
*/
-(SFApiQuery*)checkTemplateOwnedWithUrl:(NSURL*)url andId:(NSString*)Id;

/**
@abstract Check if a versioning change would result in file deletions
	
@param url 	
@param newMaxVersions 	
*/
-(SFApiQuery*)checkVersioningViolationWithUrl:(NSURL*)url id:(NSString*)Id andNewMaxVersions:(NSNumber*)newMaxVersions;
@end
